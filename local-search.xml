<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>足球队员射门能力排序</title>
    <link href="/2024/04/26/c++%E5%88%B7%E9%A2%98/"/>
    <url>/2024/04/26/c++%E5%88%B7%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h3 id="足球队员射门能力排序"><a href="#足球队员射门能力排序" class="headerlink" title="足球队员射门能力排序"></a>足球队员射门能力排序</h3><p>球队有n个足球队员参与m次射门训练，每次射门进球用1表示，射失则用0表示，依据如下规则对该n个队员的射门能力做排序 1、进球总数更多的队员射门能力更强 2、若进球总数—样多，则比较最多—次连续进球的个数，最多的队员能力更强 3、若最多一次连续进球的个数一样多，则比较第一次射失的先后顺序，其中后射失的队员更强，若第一次射失顺序相同，则按继续比较第二次射失的顺序，后丢球的队员能术更强，依次类推 4、若前3个规则排序后还能力相等，则队员编号更小的能力更强</p><p><strong>输入</strong></p><p>第1行，足球队员数n，射门训练次数m。(队员编号从1开始，依次递增) 第2行，第1~n个队员从第1到m次训练的进球情况，每个队员进球情况为连续的1和0的组合，不同队员用空格分隔n和m均为正整数，0&lt;n&lt;&#x3D;10 ^ 3，0&lt;m&lt;&#x3D;10^3</p><p><strong>输出</strong></p><p>射门能力从强到弱的队员编号,用空格分隔</p><p><strong>样例1</strong></p><p><strong>输入:</strong></p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">4 </span><span class="hljs-number">5</span><br><span class="hljs-symbol">11100 </span><span class="hljs-number">00111</span> <span class="hljs-number">10111</span> <span class="hljs-number">01111</span><br></code></pre></td></tr></table></figure><p><strong>输出:</strong></p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">4 </span><span class="hljs-number">3</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>解释:4个队员，射门训练5次，队员3和4进球数均为4个，比队员1和2的3个更多,队员3连续进球数最多一次为3个,而队员4最大为4，因此队员4射门能力强于队员3,另外队员2比队员1先丢球，因此队员1射门能力强于队员2，排序为4312</p><p><strong>样例2</strong></p><p><strong>输入:</strong></p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">2 </span><span class="hljs-number">10</span><br><span class="hljs-symbol">1011100111 </span><span class="hljs-number">1011101101</span><br></code></pre></td></tr></table></figure><p><strong>输出:</strong></p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">2 </span><span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>解释:2个队员，射门训练10次，两个队员的进球总数均为7个,连续进球最多的均为3个，且第前两次丢球顺序均为第二次和第6次训练射门，而队员2第三次丢球为第9次训练,队员2为第7次训练，因此队员2的射门能力强于队员1,排序为21</p><hr><p>题目本身不难，也可以很快有思路动笔去写，然而很多地方不太熟悉了，排序也是用的冒泡。。。应该使用C++标准库中的<code>sort()</code>函数，同时<strong>定义一个自定义的比较函数或Lambda表达式来实现排序规则</strong>。同时题目关于字符串的处理也是一个需要考虑的点。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">// 结构体用于保存球员的信息</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Player</span> &#123;<br>    <span class="hljs-type">int</span> id;<br>    <span class="hljs-type">int</span> goals;<br>    <span class="hljs-type">int</span> max_consecutive_goals;<br>    vector&lt;<span class="hljs-type">int</span>&gt; misses;<br>&#125;;<br><br><span class="hljs-comment">// 比较函数，用于排序</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">comparePlayers</span><span class="hljs-params">(<span class="hljs-type">const</span> Player &amp;p1, <span class="hljs-type">const</span> Player &amp;p2)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (p1.goals != p2.goals) &#123;<br>        <span class="hljs-keyword">return</span> p1.goals &gt; p2.goals;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (p1.max_consecutive_goals != p2.max_consecutive_goals) &#123;<br>        <span class="hljs-keyword">return</span> p1.max_consecutive_goals &gt; p2.max_consecutive_goals;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; p1.misses.<span class="hljs-built_in">size</span>(); ++i) &#123;<br>        <span class="hljs-keyword">if</span> (p1.misses[i] != p2.misses[i]) &#123;<br>            <span class="hljs-keyword">return</span> p1.misses[i] &gt; p2.misses[i];<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> p1.id &lt; p2.id;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> n, m;<br>    cin &gt;&gt; n &gt;&gt; m;<br><br>    <span class="hljs-function">vector&lt;Player&gt; <span class="hljs-title">players</span><span class="hljs-params">(n)</span></span>;<br><br>    <span class="hljs-comment">// 读取球员的进球情况</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) &#123;<br>        players[i].id = i + <span class="hljs-number">1</span>;<br>        players[i].goals = <span class="hljs-number">0</span>;<br>        players[i].max_consecutive_goals = <span class="hljs-number">0</span>;<br>        players[i].misses.<span class="hljs-built_in">resize</span>(m);<br><br>        string shots;<br>        cin &gt;&gt; shots;<br><br>        <span class="hljs-type">int</span> consecutive_goals = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; m; ++j) &#123;<br>            <span class="hljs-keyword">if</span> (shots[j] == <span class="hljs-string">&#x27;1&#x27;</span>) &#123;<br>                players[i].goals++;<br>                consecutive_goals++;<br>                players[i].max_consecutive_goals = <span class="hljs-built_in">max</span>(players[i].max_consecutive_goals, consecutive_goals);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                consecutive_goals = <span class="hljs-number">0</span>;<br>            &#125;<br>            players[i].misses[j] = shots[j];<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 对球员进行排序</span><br>    <span class="hljs-built_in">sort</span>(players.<span class="hljs-built_in">begin</span>(), players.<span class="hljs-built_in">end</span>(), comparePlayers);<br><br>    <span class="hljs-comment">// 输出排名结果</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) &#123;<br>        cout &lt;&lt; players[i].id &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>    &#125;<br>    cout &lt;&lt; endl;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><hr><p><code>sort</code> 函数可以接受一个自定义的比较函数，以便在排序时按照指定的规则进行排序。在 C++ 中，自定义的比较函数可以是一个函数或者一个函数对象（Functor）。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">// 自定义比较函数</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">customCompare</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> </span>&#123;<br>    <span class="hljs-comment">// 这里定义了一些自定义的排序规则</span><br>    <span class="hljs-comment">// 返回 true 表示 a 应该在 b 之前，返回 false 表示 a 应该在 b 之后</span><br>    <span class="hljs-comment">// 例如，按照从大到小排序</span><br>    <span class="hljs-keyword">return</span> a &gt; b;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    vector&lt;<span class="hljs-type">int</span>&gt; nums = &#123;<span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">1</span>, <span class="hljs-number">5</span>, <span class="hljs-number">9</span>, <span class="hljs-number">2</span>, <span class="hljs-number">6</span>&#125;;<br><br>    <span class="hljs-comment">// 使用自定义的比较函数进行排序</span><br>    <span class="hljs-built_in">sort</span>(nums.<span class="hljs-built_in">begin</span>(), nums.<span class="hljs-built_in">end</span>(), customCompare);<br><br>    <span class="hljs-comment">// 输出排序结果</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> num : nums) &#123;<br>        cout &lt;&lt; num &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>    &#125;<br>    cout &lt;&lt; endl;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>也可以用<strong>Lamda</strong>函数：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    vector&lt;<span class="hljs-type">int</span>&gt; nums = &#123;<span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">1</span>, <span class="hljs-number">5</span>, <span class="hljs-number">9</span>, <span class="hljs-number">2</span>, <span class="hljs-number">6</span>&#125;;<br><br>    <span class="hljs-comment">// 使用 lambda 函数进行自定义排序</span><br>    <span class="hljs-built_in">sort</span>(nums.<span class="hljs-built_in">begin</span>(), nums.<span class="hljs-built_in">end</span>(), [](<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b) &#123;<br>        <span class="hljs-comment">// 这里定义了自定义的排序规则</span><br>        <span class="hljs-comment">// 返回 true 表示 a 应该在 b 之前，返回 false 表示 a 应该在 b 之后</span><br>        <span class="hljs-comment">// 例如，按照从大到小排序</span><br>        <span class="hljs-keyword">return</span> a &gt; b;<br>    &#125;);<br><br>    <span class="hljs-comment">// 输出排序结果</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> num : nums) &#123;<br>        cout &lt;&lt; num &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>    &#125;<br>    cout &lt;&lt; endl;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>lambda 函数 <code>[](int a, int b) &#123; return a &gt; b; &#125;</code> 定义了一个简单的比较函数，用于按照从大到小的顺序进行排序。该 lambda 函数接受两个整数参数 <code>a</code> 和 <code>b</code>，并返回一个 <code>bool</code> 值，表示是否应该将 <code>a</code> 放在 <code>b</code> 之前。然后，我们将这个 lambda 函数作为第三个参数传递给 <code>sort</code> 函数，使得 <code>sort</code> 函数按照我们定义的规则对向量进行排序。</p>]]></content>
    
    
    
    <tags>
      
      <tag>c++</tag>
      
      <tag>排序</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hello world!</title>
    <link href="/2024/04/20/hello-world/"/>
    <url>/2024/04/20/hello-world/</url>
    
    <content type="html"><![CDATA[<blockquote><p><em><strong>你好，世界</strong></em></p></blockquote><p>这里是我的个人博客中的第一篇博文。</p><p>心血来潮，花了半个小时使用<code>github</code>+<code>hexo</code>草草搭建了一个博客(也可能不用过多久就不再更新 了)</p><p>第一篇文章，索性记录一下如何使用<code>hexo</code>发布文章。</p><p><strong>打开git bash</strong></p><p>​在自己的本地博客文件夹中~</p><p><strong>输入指令</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># hexo new 文章标题</span><br> &gt;&gt;&gt; hexo new 如何在hexo博客写作<br> <span class="hljs-comment"># 或者是</span><br> <span class="hljs-comment"># hexo new 文章标题 --path 路径/文件名.md</span><br> <span class="hljs-comment"># 或者可以简写一下</span><br> <span class="hljs-comment"># hexo new 文章标题 -p 路径/文件名.md</span><br> &gt;&gt;&gt; hexo new <span class="hljs-string">&quot;如何在hexo博客写作&quot;</span> -p 计算机科学/博客/如何在hexo博客写作.md<br> <span class="hljs-comment"># tips：如果不设置路径的话，新建文章是默认存储在\source\_posts\这个路径下的。</span><br> <span class="hljs-comment"># tips：一般在标题下有空格或者其他字符要给标题加上双引号</span><br></code></pre></td></tr></table></figure><p><strong>编辑博文</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs markdown">title: 如何在hexo博客写作          #文章标题<br>date: 2022-04-13 11:52:06        #文章创建时间<br>tags:                       #文章标签<br><span class="hljs-bullet">   -</span> 博客<br><span class="hljs-bullet">   -</span> 每日一更<br>categories:                     #文章类别<br><span class="hljs-bullet">   -</span> 计算机科学<br><span class="hljs-bullet">   -</span> 博客<br><span class="hljs-bullet">   -</span> 博客的食用方法<br></code></pre></td></tr></table></figure><p><strong>发布！</strong></p><p>hexo三连</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo clean<br>hexo g<br>hexo d<br></code></pre></td></tr></table></figure><p>也可以先本地预览</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo s</span><br></code></pre></td></tr></table></figure><hr><p>就酱！想到什么了再补充。</p><p><img src="https://pica.zhimg.com/80/v2-8c1fbe93975e4ef94b5845bbbabb75f2_1440w.webp"></p><div style="text-align: right;">    <em>2024/04/20 于钱学森图书馆</em></div>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>教程</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
